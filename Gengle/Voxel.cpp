#include "Voxel.h"
#include <cmath>
#include <cassert>
#include <vector>
#include <GLEW/1.11.0/glew.h> 
#include <glm/vec2.hpp>
#include <glm/gtc/matrix_transform.hpp>
using namespace std;
GLushort Voxel::EdgesByAxis[3][4]={{1,3,5,7},
                                        {8,9,10,11},
                                        {0,2,4,6}};
GLushort Voxel::EdgesByRegion[3][2][4]={{{0,4,8,9},{2,6,10,11}},{{0,1,2,3},{4,5,6,7}},{{3,7,8,11},{1,5,9,10}}};
GLushort Voxel::CornersOfEdge[12][2]={{0,1},{1,2},{3,2},{0,3},
                                            {4,5},{5,6},{7,6},{4,7},
                                            {0,4},{1,5},{2,6},{3,7}};
#pragma region Voxel::VerticeCount
GLchar Voxel::VerticeCount[]={0,3,3,6,3,6,6,9,3,6,6,9,6,9,9,6,3,6,6,9,6,9,9,12,6,9,9,12,9,12,12,9,3,6,6,9,6,9,9,12,6,9,9,12,9,12,12,
9,6,9,9,6,9,12,12,9,9,12,12,9,12,15,15,6,3,6,6,9,6,9,9,12,6,9,9,12,9,12,12,9,6,9,9,12,9,12,12,15,9,12,12,15,12,15,15,12,6,9,9,12,9,12,6,9,9,12,
12,15,12,15,9,6,9,12,12,9,12,15,9,6,12,15,15,12,15,6,12,3,3,6,6,9,6,9,9,12,6,9,9,12,9,12,12,9,6,9,9,12,9,12,12,15,9,6,12,9,12,9,15,6,6,9,9,12,
9,12,12,15,9,12,12,15,12,15,15,12,9,12,12,9,12,15,15,12,12,9,15,6,15,12,6,3,6,9,9,12,9,12,12,15,9,12,12,15,6,9,9,6,9,12,12,15,12,15,15,6,12,9,
15,12,9,6,12,3,9,12,12,15,12,15,9,12,12,15,15,6,9,12,6,3,6,9,9,6,9,12,6,3,9,6,12,3,6,3,3,0};
#pragma endregion
#pragma region Voxel::EdgesOfIndex
GLchar Voxel::EdgesOfIndex[256][15]={
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,8,3,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,1,2,0,8,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,0,2,10,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,3,2,10,8,10,9,8,-1,-1,-1,-1,-1,-1},
{11,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,2,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,2,3,1,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,11,2,1,9,11,9,8,11,-1,-1,-1,-1,-1,-1},
{11,1,3,11,10,1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,1,0,8,10,8,11,10,-1,-1,-1,-1,-1,-1},
{3,9,0,3,11,9,11,10,9,-1,-1,-1,-1,-1,-1},
{9,8,10,10,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,3,0,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,0,4,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,1,9,4,7,1,7,3,1,-1,-1,-1,-1,-1,-1},
{8,4,7,10,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,0,4,7,3,0,2,10,1,-1,-1,-1,-1,-1,-1},
{10,0,2,10,9,0,4,7,8,-1,-1,-1,-1,-1,-1},
{9,4,10,10,4,7,10,7,2,2,7,3,-1,-1,-1},
{4,7,8,11,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,4,7,11,2,4,2,0,4,-1,-1,-1,-1,-1,-1},
{9,0,1,3,11,2,6,8,4,-1,-1,-1,-1,-1,-1},
{2,1,11,11,1,9,11,9,7,7,9,4,-1,-1,-1},
{1,11,10,1,3,11,8,4,7,-1,-1,-1,-1,-1,-1},
{10,7,11,10,4,7,10,1,4,1,0,4,-1,-1,-1},
{3,9,0,3,11,9,11,10,9,0,7,8,-1,-1,-1},
{11,10,9,11,9,4,7,11,4,-1,-1,-1,-1,-1,-1},
{9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,0,8,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,0,1,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,5,4,8,3,5,3,1,5,-1,-1,-1,-1,-1,-1},
{4,9,5,1,2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,0,8,9,5,4,6,1,2,-1,-1,-1,-1,-1,-1},
{5,2,10,5,4,2,4,0,2,-1,-1,-1,-1,-1,-1},
{4,8,5,5,8,3,5,3,10,10,3,2,-1,-1,-1},
{11,2,3,9,5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,2,0,8,9,5,4,-1,-1,-1,-1,-1,-1},
{4,1,5,4,0,1,3,11,2,-1,-1,-1,-1,-1,-1},
{5,2,1,5,11,2,5,4,11,4,8,11,-1,-1,-1},
{11,1,3,11,10,1,5,4,9,-1,-1,-1,-1,-1,-1},
{0,10,1,0,8,10,8,11,10,1,4,9,-1,-1,-1},
{0,3,4,4,3,11,4,11,5,5,11,10,-1,-1,-1},
{8,11,10,8,10,5,4,8,5,-1,-1,-1,-1,-1,-1},
{8,5,7,8,9,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,3,0,9,5,3,5,7,3,-1,-1,-1,-1,-1,-1},
{0,7,8,0,1,7,1,5,7,-1,-1,-1,-1,-1,-1},
{5,7,1,1,7,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,5,7,8,9,5,1,2,10,-1,-1,-1,-1,-1,-1},
{9,3,0,9,5,3,5,7,3,0,10,1,-1,-1,-1},
{7,10,5,7,2,10,7,8,2,8,0,2,-1,-1,-1},
{5,7,3,5,3,2,10,5,2,-1,-1,-1,-1,-1,-1},
{5,8,9,5,7,8,11,2,3,-1,-1,-1,-1,-1,-1},
{0,9,2,2,9,5,2,5,11,11,5,7,-1,-1,-1},
{0,7,8,0,1,7,1,5,7,8,2,3,-1,-1,-1},
{1,5,7,1,7,11,2,1,11,-1,-1,-1,-1,-1,-1},
{8,5,7,8,9,5,3,11,10,3,10,1,-1,-1,-1},
{9,8,0,0,8,7,0,7,11,0,11,10,0,10,1},
{3,1,0,0,1,10,0,10,5,0,5,7,0,7,8},
{10,5,7,11,10,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,0,8,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,9,10,6,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,8,3,1,9,10,6,5,-1,-1,-1,-1,-1,-1},
{5,2,6,5,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,2,6,5,1,2,0,8,3,-1,-1,-1,-1,-1,-1},
{9,6,5,9,0,6,0,2,6,-1,-1,-1,-1,-1,-1},
{8,5,9,8,6,5,8,3,6,3,2,6,-1,-1,-1},
{5,10,6,2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,2,0,8,11,2,6,5,10,-1,-1,-1,-1,-1,-1},
{11,2,3,1,9,0,4,10,6,-1,-1,-1,-1,-1,-1},
{1,11,2,1,9,11,9,8,11,2,5,10,-1,-1,-1},
{6,3,11,6,5,3,5,1,3,-1,-1,-1,-1,-1,-1},
{1,0,5,5,0,8,5,8,6,6,8,11,-1,-1,-1},
{0,3,9,9,3,11,9,11,5,5,11,6,-1,-1,-1},
{9,8,11,9,11,6,5,9,6,-1,-1,-1,-1,-1,-1},
{8,4,7,5,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,3,0,4,7,5,10,6,-1,-1,-1,-1,-1,-1},
{8,4,7,5,10,6,2,9,0,-1,-1,-1,-1,-1,-1},
{4,1,9,4,7,1,7,3,1,9,6,5,-1,-1,-1},
{2,5,1,2,6,5,7,8,4,-1,-1,-1,-1,-1,-1},
{0,7,3,0,4,7,1,2,6,1,6,5,-1,-1,-1},
{9,6,5,9,0,6,0,2,6,5,8,4,-1,-1,-1},
{4,0,9,9,0,3,9,3,2,9,2,6,9,6,5},
{10,6,5,7,8,4,0,11,2,-1,-1,-1,-1,-1,-1},
{11,4,7,11,2,4,2,0,4,7,10,6,-1,-1,-1},
{8,4,7,5,10,6,1,9,0,2,3,11,-1,-1,-1},
{10,6,5,2,1,11,11,1,9,11,9,7,7,9,4},
{6,3,11,6,5,3,5,1,3,11,4,7,-1,-1,-1},
{6,2,11,11,2,1,11,1,0,11,0,4,11,4,7},
{8,4,7,0,3,9,9,3,11,9,11,5,5,11,6},
{6,2,11,2,9,11,9,4,11,11,4,7,-1,-1,-1},
{9,6,4,9,10,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,10,6,4,9,8,3,0,-1,-1,-1,-1,-1,-1},
{10,0,1,10,6,0,6,4,0,-1,-1,-1,-1,-1,-1},
{4,8,6,6,8,3,6,3,10,10,3,1,-1,-1,-1},
{1,4,9,1,2,4,2,6,4,-1,-1,-1,-1,-1,-1},
{1,4,9,1,2,4,2,6,4,9,3,0,-1,-1,-1},
{6,4,2,2,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,2,8,2,4,8,2,6,4,-1,-1,-1,-1,-1,-1},                          // 103 - REVERSED
{9,6,4,9,10,6,2,3,11,-1,-1,-1,-1,-1,-1},
{2,8,11,2,0,8,10,6,4,10,4,9,-1,-1,-1},
{10,0,1,10,6,0,6,4,0,1,11,2,-1,-1,-1},
{10,9,1,1,9,4,1,4,8,1,8,11,1,11,2},
{3,9,1,3,4,9,3,11,4,11,6,4,-1,-1,-1},
{0,2,1,1,2,11,1,11,6,1,6,4,1,4,9},
{6,4,0,6,0,3,11,6,3,-1,-1,-1,-1,-1,-1},
{11,6,4,8,11,4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,6,7,8,10,8,9,10,-1,-1,-1,-1,-1,-1},
{10,0,9,10,3,0,10,6,3,6,7,3,-1,-1,-1},
{6,7,10,10,7,8,10,8,1,1,8,0,-1,-1,-1},
{7,3,1,7,1,10,6,7,10,-1,-1,-1,-1,-1,-1},
{6,7,2,2,7,8,2,8,1,1,8,9,-1,-1,-1},
{1,5,9,9,5,6,9,6,7,9,7,3,9,3,0},
{0,2,6,0,6,7,8,0,7,-1,-1,-1,-1,-1,-1},
{3,2,6,7,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,6,7,8,10,8,9,10,6,3,11,-1,-1,-1},
{11,8,7,7,8,0,7,0,9,7,9,10,7,10,6},
{11,2,3,6,7,10,10,7,8,10,8,1,1,8,0},
{10,9,1,9,7,1,7,11,1,1,11,2,-1,-1,-1},
{7,5,6,6,5,9,6,9,1,6,1,3,6,3,11},
{0,9,1,11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,1,0,1,6,0,6,7,0,0,7,8,-1,-1,-1},
{11,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,7,3,0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,6,11,1,9,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,3,1,9,8,3,7,6,11,-1,-1,-1,-1,-1,-1},
{7,6,11,10,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,10,11,7,6,4,3,0,-1,-1,-1,-1,-1,-1},
{0,10,9,0,2,10,11,7,6,-1,-1,-1,-1,-1,-1},
{2,8,3,2,10,8,10,9,8,3,6,11,-1,-1,-1},
{6,3,7,6,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,0,8,7,6,0,6,2,0,-1,-1,-1,-1,-1,-1},
{6,3,7,6,2,3,1,9,0,-1,-1,-1,-1,-1,-1},
{2,1,6,6,1,9,6,9,7,7,9,8,-1,-1,-1},
{10,7,6,10,1,7,1,3,7,-1,-1,-1,-1,-1,-1},
{6,10,7,7,10,1,7,1,8,8,1,0,-1,-1,-1},
{9,6,10,9,7,6,9,0,7,0,3,7,-1,-1,-1},
{10,9,8,10,8,7,6,10,7,-1,-1,-1,-1,-1,-1},
{4,11,8,4,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,11,3,0,6,0,4,6,-1,-1,-1,-1,-1,-1},
{11,4,6,11,8,4,0,1,9,-1,-1,-1,-1,-1,-1},
{1,11,3,1,6,11,1,9,6,9,4,6,-1,-1,-1},
{4,11,8,4,6,11,10,1,2,-1,-1,-1,-1,-1,-1},
{3,6,11,3,0,6,0,4,6,11,1,2,-1,-1,-1},
{4,11,8,4,6,11,9,0,2,9,2,10,-1,-1,-1},
{2,0,3,3,0,9,3,9,4,3,4,6,3,6,11},
{8,2,3,8,4,2,4,6,2,-1,-1,-1,-1,-1,-1},
{4,6,0,0,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,2,3,8,4,2,4,6,2,3,9,0,-1,-1,-1},
{4,6,2,4,2,1,9,4,1,-1,-1,-1,-1,-1,-1},
{6,10,4,4,10,1,4,1,8,8,1,3,-1,-1,-1},
{0,4,6,0,6,10,1,0,10,-1,-1,-1,-1,-1,-1},
{8,11,3,3,11,6,3,6,10,3,10,9,3,9,0},
{6,10,9,4,6,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,5,4,6,11,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,4,9,8,3,0,2,7,6,-1,-1,-1,-1,-1,-1},
{1,4,0,1,5,4,6,11,7,-1,-1,-1,-1,-1,-1},
{8,5,4,8,3,5,3,1,5,4,11,7,-1,-1,-1},
{7,6,11,10,1,2,0,5,4,-1,-1,-1,-1,-1,-1},
{3,0,8,9,5,4,10,1,2,6,11,7,-1,-1,-1},
{5,2,10,5,4,2,4,0,2,10,7,6,-1,-1,-1},
{7,6,11,4,8,5,5,8,3,5,3,10,10,3,2},
{3,6,2,3,7,6,4,9,5,-1,-1,-1,-1,-1,-1},
{7,0,8,7,6,0,6,2,0,8,5,4,-1,-1,-1},
{6,3,7,6,2,3,5,4,0,5,0,1,-1,-1,-1},
{7,3,8,8,3,2,8,2,1,8,1,5,8,5,4},
{10,7,6,10,1,7,1,3,7,6,9,5,-1,-1,-1},
{5,4,9,6,10,7,7,10,1,7,1,8,8,1,0},
{5,1,10,10,1,0,10,0,3,10,3,7,10,7,6},
{5,1,10,1,8,10,8,7,10,10,7,6,-1,-1,-1},
{6,9,5,6,11,9,11,8,9,-1,-1,-1,-1,-1,-1},
{0,9,3,3,9,5,3,5,11,11,5,6,-1,-1,-1},
{5,6,1,1,6,11,1,11,0,0,11,8,-1,-1,-1},
{3,1,5,3,5,6,11,3,6,-1,-1,-1,-1,-1,-1},
{6,9,5,6,11,9,11,8,9,5,2,10,-1,-1,-1},
{1,2,10,0,9,3,3,9,5,3,5,11,11,5,6},
{6,4,5,5,4,8,5,8,0,5,0,2,5,2,10},
{2,0,3,0,5,3,5,6,3,3,6,11,-1,-1,-1},
{9,3,8,9,2,3,9,5,2,5,6,2,-1,-1,-1},
{6,2,0,6,0,9,5,6,9,-1,-1,-1,-1,-1,-1},
{0,4,8,8,4,5,8,5,6,8,6,2,8,2,3},
{2,1,5,6,2,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,11,6,6,11,3,6,3,8,6,8,9,6,9,5},
{10,11,6,11,0,6,0,9,6,6,9,5,-1,-1,-1},
{6,10,5,8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,10,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,11,7,5,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,7,5,10,11,7,3,0,8,-1,-1,-1,-1,-1,-1},
{7,10,11,7,5,10,9,0,1,-1,-1,-1,-1,-1,-1},
{3,9,8,3,1,9,11,7,5,11,5,10,-1,-1,-1},
{11,1,2,11,7,1,7,5,1,-1,-1,-1,-1,-1,-1},
{11,1,2,11,7,1,7,5,1,2,8,3,-1,-1,-1},
{2,11,0,0,11,7,0,7,9,9,7,5,-1,-1,-1},
{11,10,2,2,10,5,2,5,9,2,9,8,2,8,3},
{2,5,10,2,3,5,3,7,5,-1,-1,-1,-1,-1,-1},
{5,8,7,5,0,8,5,10,0,10,2,0,-1,-1,-1},
{2,5,10,2,3,5,3,7,5,10,0,1,-1,-1,-1},
{1,3,2,2,3,8,2,8,7,2,7,5,2,5,10},
{1,3,5,5,3,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,5,1,7,1,0,8,7,0,-1,-1,-1,-1,-1,-1},
{3,7,5,3,5,9,0,3,9,-1,-1,-1,-1,-1,-1},
{5,9,8,7,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,4,5,10,8,10,11,8,-1,-1,-1,-1,-1,-1},
{4,5,0,0,5,10,0,10,3,3,10,11,-1,-1,-1},
{5,8,4,5,10,8,10,11,8,4,1,9,-1,-1,-1},
{5,7,4,4,7,11,4,11,3,4,3,1,4,1,9},
{1,4,5,1,8,4,1,2,8,2,11,8,-1,-1,-1},
{3,7,11,11,7,4,11,4,5,11,5,1,11,1,2},
{9,10,5,5,10,2,5,2,11,5,11,8,5,8,4},
{4,5,9,3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,8,8,5,10,8,10,3,3,10,2,-1,-1,-1},
{2,0,4,2,4,5,10,2,5,-1,-1,-1,-1,-1,-1},
{9,0,1,4,5,8,8,5,10,8,10,3,3,10,2},
{5,7,4,7,2,4,2,1,4,4,1,9,-1,-1,-1},
{5,1,3,5,3,8,4,5,8,-1,-1,-1,-1,-1,-1},
{4,5,1,0,4,1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,5,10,3,5,3,8,5,5,8,4,-1,-1,-1},
{4,5,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,7,4,9,11,9,10,11,-1,-1,-1,-1,-1,-1},
{4,11,7,4,9,11,9,10,11,7,0,8,-1,-1,-1},
{11,1,10,11,0,1,11,7,0,7,4,0,-1,-1,-1},
{8,9,4,4,9,1,4,1,10,4,10,11,4,11,7},
{2,11,1,1,11,7,1,7,9,9,7,4,-1,-1,-1},
{3,0,8,2,11,1,1,11,7,1,7,9,9,7,4},
{4,0,2,4,2,11,7,4,11,-1,-1,-1,-1,-1,-1},
{8,9,4,9,2,4,2,11,4,4,11,7,-1,-1,-1},
{10,2,9,9,2,3,9,3,4,4,3,7,-1,-1,-1},
{4,6,7,7,6,10,7,10,2,7,2,0,7,0,8},
{2,6,10,10,6,7,10,7,4,10,4,0,10,0,1},
{7,4,8,2,1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},                      // 235 - REVERSED
{1,3,7,1,7,4,9,1,4,-1,-1,-1,-1,-1,-1},
{4,6,7,6,1,7,1,0,7,7,0,8,-1,-1,-1},
{3,7,0,7,4,0,-1,-1,-1,-1,-1,-1,-1,-1,-1},                       // 238 - REVERSED
{7,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},                    // 239 - REVERSED
{10,11,9,9,11,8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,11,9,11,3,0,9,3,-1,-1,-1,-1,-1,-1},
{10,11,8,10,8,0,1,10,0,-1,-1,-1,-1,-1,-1},
{1,10,11,3,1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,8,9,11,9,1,2,11,1,-1,-1,-1,-1,-1,-1},
{1,5,9,5,11,9,11,3,9,9,3,0,-1,-1,-1},
{8,0,2,11,8,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,10,8,10,2,3,8,2,-1,-1,-1,-1,-1,-1},                        // 248
{0,9,10,2,0,10,-1,-1,-1,-1,-1,-1,-1,-1,-1},                     // 249
{0,4,8,4,10,8,10,2,8,8,2,3,-1,-1,-1},                           // 250
{2,1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},                   // 251
{9,1,3,8,9,3,-1,-1,-1,-1,-1,-1,-1,-1,-1},                       // 252
{0,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},                    // 253
{8,0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},                    // 254
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}};                // 255
#pragma endregion
GLuchar Voxel::InvertedIndices[]={31,47,55,59,63,79,103,110,111,118,119,125,127,143,155,157,159,179,185,187,190,191,205,206,
                                207,215,217,220,221,223,230,235,236,238,239,241,242,243,244,246,247,248,249,251,252,253,254};
Voxel::Voxel(GLfloat x_in, GLfloat y_in, GLfloat z_in, GLfloat radius_in)
{
    //
    this->origin[0]=x_in; this->origin[1]=y_in; this->origin[2]=z_in;
    this->radius=radius_in;
    this->marchingCubeCase=-1;
    // ~ Corners
    // 0
    GLfloat this_corner[3]={x_in-radius_in,y_in-radius_in,z_in-radius_in};
    memcpy(this->corners[0],this_corner,sizeof(GLfloat)*3);
    // 1
    this_corner[0]=x_in-radius_in; this_corner[1]=y_in-radius_in; this_corner[2]=z_in+radius_in;
    memcpy(this->corners[1],this_corner,sizeof(GLfloat)*3);
    // 2
    this_corner[0]=x_in+radius_in; this_corner[1]=y_in-radius_in; this_corner[2]=z_in+radius_in;
    memcpy(this->corners[2],this_corner,sizeof(GLfloat)*3);
    // 3
    this_corner[0]=x_in+radius_in; this_corner[1]=y_in-radius_in; this_corner[2]=z_in-radius_in;
    memcpy(this->corners[3],this_corner,sizeof(GLfloat)*3);
    // 4
    this_corner[0]=x_in-radius_in; this_corner[1]=y_in+radius_in; this_corner[2]=z_in-radius_in;
    memcpy(this->corners[4],this_corner,sizeof(GLfloat)*3);
    // 5
    this_corner[0]=x_in-radius_in; this_corner[1]=y_in+radius_in; this_corner[2]=z_in+radius_in;
    memcpy(this->corners[5],this_corner,sizeof(GLfloat)*3);
    // 6
    this_corner[0]=x_in+radius_in; this_corner[1]=y_in+radius_in; this_corner[2]=z_in+radius_in;
    memcpy(this->corners[6],this_corner,sizeof(GLfloat)*3);
    // 7
    this_corner[0]=x_in+radius_in; this_corner[1]=y_in+radius_in; this_corner[2]=z_in-radius_in;
    memcpy(this->corners[7],this_corner,sizeof(GLfloat)*3);
    return;
}  
Voxel & Voxel::operator=(const Voxel & voxel_in)
{
    for (GLuint i=0; i<3; i++)
    {
        this->origin[i]=voxel_in.origin[i];
        for(GLuint j=0; j<8; j++)
        {
            this->corners[j][i]=voxel_in.corners[j][i];
        }
    }
    this->radius=voxel_in.radius;
    this->marchingCubeCase=voxel_in.marchingCubeCase;
    return *this;
}
vector<glm::vec3> Voxel::SetMarchingCubesParameters(GLchar corner_vals[8])
{
    // determine marchine cubes case
    vector<glm::vec3> vertices;
    this->marchingCubeCase=0;
    for(GLint i=0; i<8; i++)
    {
        if(corner_vals[i]<0)
            this->marchingCubeCase+=(GLshort)pow(2.0,i);
    }
    // determine number of vertices
    GLuint num_vertices=(GLuint)Voxel::VerticeCount[this->marchingCubeCase];
    // these cases render nothing
    if(num_vertices < 1)
        return vertices;
    // determine target edges (edges on which vertices will be placed)
    GLchar these_edges[15];
    memcpy(these_edges,Voxel::EdgesOfIndex[this->marchingCubeCase],sizeof(GLchar)*15);
    vertices.resize(num_vertices); 
    // iterate through each vertex
    for(GLint i=0; i<num_vertices; i++)
    {
        bool limit_node=false;
        // determine relevant corners for interpolation for current vertex
        GLshort corner=Voxel::CornersOfEdge[these_edges[i]][0];
        // determine interpolation ratio for current vertex
        GLfloat ratio=((GLfloat)abs(corner_vals[corner]))/((GLfloat)(abs(corner_vals[corner])+abs(corner_vals[Voxel::CornersOfEdge[these_edges[i]][1]])));
        // determine axis of interpolation for curent vertex
        GLint axis=-1;
        for(GLint axis_index=0; axis_index<3 && axis == -1; axis_index++)
        {
            for(GLint edge_index=0; edge_index<4 && axis == -1; edge_index++)
            {
                if (Voxel::EdgesByAxis[axis_index][edge_index]==these_edges[i])
                    axis=axis_index;
            }
        }
        /* each edge is 1-dimensional and therefor only interpolated on a single axis */
        // determine x, y, z, values for current vertex
        float node_vals[3];
        for(GLint j=0; j<3; j++)
        {
            // assume vertex is on a non-interpolated edge
            node_vals[j]=this->corners[corner][j];
            // add interpolation value to the 'active' edge
            if(axis==j)
                node_vals[j]+=(GLfloat)(2.0*ratio*this->radius);
        }
        // store vertices
        vertices.push_back(glm::vec3(node_vals[0],node_vals[1],node_vals[2]));

    }
    return vertices;
}
Voxel::~Voxel(void)
{
    return;
}